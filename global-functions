#!rsc
# RouterOS script: global-functions
# Copyright (c) 2013-2018 Christian Hesse <mail@eworm.de>
#
# global functions

# read input from user
:global Read do={
  :return;
}

# url encoding
:global UrlEncode do={
  :local input [ :tostr $1 ];
  :local return "";

  :if ([ :len $input ] > 0) do={
    :local chars " %&";
    :local subs { "%20"; "%25"; "%26" };

    :for i from=0 to=([ :len $input ] - 1) do={
      :local char [ :pick $input $i ];
      :local replace [ :find $chars $char ];

      :if ([ :len $replace ] > 0) do={
        :set char ($subs->$replace);
      }
      :set return ($return . $char);
    }
  }

  :return $return;
}

# check and import required certificates
:global CertificateAvailable do={
  :local fprint [ :tostr $1 ];

  :global "script-updates-baseurl";
  :global "script-updates-urlsuffix";

  :if ([ / certificate print count-only where fingerprint=$fprint ] = 0) do={
    :log info ("Certificate with fingerprint " . $fprint . \
      " not available, downloading and importing.");
    :do {
      / tool fetch check-certificate=yes-without-crl \
        ($"script-updates-baseurl" . "certs/" . \
        $fprint . ".pem" . $"script-updates-urlsuffix") \
        dst-path=($fprint . ".pem");
      / certificate import file-name=($fprint . ".pem") passphrase="";
    } on-error={
      :log warning "Failed imprting certificate!";
    }
  }
}

# send notification via e-mail and telegram
# Note that subject and attachment are ignored for telegram!
:global SendNotification do={
  :local subject [ :tostr $1 ];
  :local message [ :tostr $2 ];
  :local attach [ :tostr $3 ];

  :global "identity";
  :global "email-general-to";
  :global "email-general-cc";
  :global "telegram-tokenid";
  :global "telegram-chatid";

  :global UrlEncode;
  :global CertificateAvailable;

  :if ([ :len $"email-general-to" ] > 0) do={
    :do {
      / tool e-mail send to=$"email-general-to" cc=$"email-general-cc" \
        subject=("[" . $"identity" . "] " . $subject) body=$message file=$attach;
    } on-error={
      :log warning "Failed sending notification mail!";
    }
  }

  :if ([ :len $"telegram-tokenid" ] > 0 && [ :len $"telegram-chatid" ] > 0) do={
    $CertificateAvailable "973a41276ffd01e027a2aad49e34c37846d3e976ff6a620b6712e33832041aa6";
    :do {
      / tool fetch check-certificate=yes-without-crl keep-result=no http-method=post \
        ("https://api.telegram.org/bot" . $"telegram-tokenid" . "/sendMessage") \
        http-data=("chat_id=" . $"telegram-chatid" . "&text=" . \
        [ $UrlEncode ("[" . $"identity" . "] " . $subject . "\n\n" . $message) ]);
    } on-error={
      :log warning "Failed sending telegram notification!";
    }
  }
}
