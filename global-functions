#!rsc
# RouterOS script: global-functions
# Copyright (c) 2013-2019 Christian Hesse <mail@eworm.de>
#
# global functions

# read input from user
:global Read do={
  :return;
}

# url encoding
:global UrlEncode do={
  :local input [ :tostr $1 ];
  :local return "";

  :if ([ :len $input ] > 0) do={
    :local chars " %&";
    :local subs { "%20"; "%25"; "%26" };

    :for i from=0 to=([ :len $input ] - 1) do={
      :local char [ :pick $input $i ];
      :local replace [ :find $chars $char ];

      :if ([ :len $replace ] > 0) do={
        :set char ($subs->$replace);
      }
      :set return ($return . $char);
    }
  }

  :return $return;
}

# check and import required certificates
:global CertificateAvailable do={
  :local commonname [ :tostr $1 ];
  :local filename ([ :tostr $2 ] . ".pem");

  :global "script-updates-baseurl";
  :global "script-updates-urlsuffix";

  :if ([ / certificate print count-only where common-name=$commonname ] = 0) do={
    :log info ("Certificate with CommonName " . $commonname . \
      " not available, downloading and importing.");
    :do {
      / tool fetch check-certificate=yes-without-crl \
        ($"script-updates-baseurl" . "certs/" . \
        $filename . $"script-updates-urlsuffix") \
        dst-path=$filename;
      / certificate import file-name=$filename passphrase="";
    } on-error={
      :log warning "Failed imprting certificate!";
    }
  }
}

# send notification via e-mail and telegram
# Note that attachment is ignored for telegram!
:global SendNotification do={
  :local subject [ :tostr $1 ];
  :local message [ :tostr $2 ];
  :local attach [ :tostr $3 ];

  :global "identity";
  :global "email-general-to";
  :global "email-general-cc";
  :global "telegram-tokenid";
  :global "telegram-chatid";

  :global UrlEncode;
  :global CertificateAvailable;

  :if ([ :len $"email-general-to" ] > 0) do={
    :do {
      / tool e-mail send to=$"email-general-to" cc=$"email-general-cc" \
        subject=("[" . $"identity" . "] " . $subject) body=$message file=$attach;
    } on-error={
      :log warning "Failed sending notification mail!";
    }
  }

  :if ([ :len $"telegram-tokenid" ] > 0 && [ :len $"telegram-chatid" ] > 0) do={
    $CertificateAvailable "Go Daddy Secure Certificate Authority - G2" "godaddy";
    :do {
      / tool fetch check-certificate=yes-without-crl keep-result=no http-method=post \
        ("https://api.telegram.org/bot" . $"telegram-tokenid" . "/sendMessage") \
        http-data=("chat_id=" . $"telegram-chatid" . "&text=" . \
        [ $UrlEncode ("[" . $"identity" . "] " . $subject . "\n\n" . $message) ]);
    } on-error={
      :log warning "Failed sending telegram notification!";
    }
  }
}

# get MAC vendor
:global GetMacVendor do={
  :local mac [ :tostr $1 ];

  :global CertificateAvailable;

  :do {
    :local vendor;
    $CertificateAvailable "Let's Encrypt Authority X3" "letsencrypt";
    :set vendor ([ / tool fetch mode=https check-certificate=yes-without-crl \
      url=("https://api.macvendors.com/" . [ :pick $mac 0 8 ]) output=user as-value ]->"data");
    :return $vendor;
  } on-error={
    :return "unknown vendor";
  }
}

# download package from upgrade server
:global DownloadPackage do={
  :local pkgname [ :tostr $1 ];
  :local pkgver  [ :tostr $2 ];
  :local pkgarch [ :tostr $3 ];
  :local pkgdest [ :tostr $4 ];

  :global CertificateAvailable;

  :if ([ :len $pkgname ] = 0) do={ return false; }
  :if ([ :len $pkgver  ] = 0) do={ :set pkgver  [ / system package update get installed-version ]; }
  :if ([ :len $pkgarch ] = 0) do={ :set pkgarch [ / system resource get architecture-name ]; }

  $CertificateAvailable "Let's Encrypt Authority X3" "letsencrypt";
  do {
    :local pkgfile ($pkgname . "-" . $pkgver . "-" . $pkgarch . ".npk");
    / tool fetch mode=https check-certificate=yes-without-crl \
      ("https://upgrade.mikrotik.com/routeros/" . $pkgver . "/" . $pkgfile) \
      dst-path=($pkgdest . "/" . $pkgfile);
    return true;
  } on-error={
    return false;
  }
}
