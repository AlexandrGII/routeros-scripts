#!rsc
# RouterOS script: global-functions
# Copyright (c) 2013-2018 Christian Hesse <mail@eworm.de>
#
# global functions

# return pseudo-random string for PSK
:global GeneratePSK do={
  :local date $1;

  :global "daily-psk-secrets";

  :local months {
    "jan"; "feb"; "mar"; "apr"; "may"; "jun";
    "jul"; "aug"; "sep"; "oct"; "nov"; "dec"
  }
  :local monthtbl {
    0; 3; 3; 6; 1; 4; 6; 2; 5; 0; 3; 5
  }

  :local monthstr [ :pick $date 0 3 ];
  :local month;
  :local day [ :pick $date 4 6 ];
  :local century [ :pick $date 7 9 ];
  :local year [ :pick $date 9 11 ];

  # get numeric value for month
  :for mindex from=0 to=[ :len $months ] do={
    :if ([ :pick $months $mindex ] = $monthstr) do={
      :set month $mindex;
    }
  }

  # calculate day of week
  :local sum 0;
  :set sum ($sum + (2 * (3 - ($century - (($century / 4) * 4)))));
  :set sum ($sum + ($year / 4));
  :set sum ($sum + $year + $day);
  :set sum ($sum + $month);
  :set sum ($sum - (($sum / 7) * 7));

  :local return ([ :pick [ :pick $"daily-psk-secrets" 0 ] ($day - 1) ] . \
    [ :pick [ :pick $"daily-psk-secrets" 1 ] $month ] . \
    [ :pick [ :pick $"daily-psk-secrets" 2 ] $sum ]);

  :return $return;
}

# url encoding
:global UrlEncode do={
  :local return "";

  :if ([ :len $1 ] > 0) do={
    :local chars " %&";
    :local subs { "%20"; "%25"; "%26" };

    :for i from=0 to=([ :len $1 ] - 1) do={
      :local char [ :pick $1 $i ];
      :local replace [ :find $chars $char ];

      :if ([ :len $replace ] > 0) do={
        :set $char ($subs->$replace);
      }
      :set $return ($return . $char);
    }
  }

  :return $return;
}

# send notification via e-mail and telegram
# Note that subject and attachment are ignored for telegram!
:global SendNotification do={
  :local subject $1;
  :local message $2;
  :local attach $3;

  :global "email-general-to";
  :global "email-general-cc";
  :global "telegram-tokenid";
  :global "telegram-chatid";

  :global UrlEncode;

  :if ([ :len $"email-general-to" ] > 0) do={
    :do {
      / tool e-mail send to=$"email-general-to" cc=$"email-general-cc" \
        subject=$subject body=$message file=$attach;
    } on-error={
      :log warning "Failed sending notification mail!";
    }
  }

  # You need to import the certificate chain for api.telegram.org!
  # https://certs.godaddy.com/repository/gdroot-g2.crt
  # https://certs.godaddy.com/repository/gdig2.crt.pem
  :if ([ :len $"telegram-tokenid" ] > 0 && [ :len $"telegram-chatid" ] > 0) do={
    do {
     / tool fetch check-certificate=yes-without-crl keep-result=no http-method=post \
        ("https://api.telegram.org/bot" . $"telegram-tokenid" . "/sendMessage") \
        http-data=("chat_id=" . $"telegram-chatid" . "&text=" . [ $UrlEncode $message ]);
    } on-error={
      :log warning "Failed sending telegram notification!";
    }
  }
}
