#!rsc
# RouterOS script: global-functions
# Copyright (c) 2013-2018 Christian Hesse <mail@eworm.de>
#
# global functions

# url encoding
:global UrlEncode do={
  :local input [ :tostr $1 ];
  :local return "";

  :if ([ :len $input ] > 0) do={
    :local chars " %&";
    :local subs { "%20"; "%25"; "%26" };

    :for i from=0 to=([ :len $input ] - 1) do={
      :local char [ :pick $input $i ];
      :local replace [ :find $chars $char ];

      :if ([ :len $replace ] > 0) do={
        :set $char ($subs->$replace);
      }
      :set $return ($return . $char);
    }
  }

  :return $return;
}

# send notification via e-mail and telegram
# Note that subject and attachment are ignored for telegram!
:global SendNotification do={
  :local subject [ :tostr $1 ];
  :local message [ :tostr $2 ];
  :local attach [ :tostr $3 ];

  :global "email-general-to";
  :global "email-general-cc";
  :global "telegram-tokenid";
  :global "telegram-chatid";

  :global UrlEncode;

  :if ([ :len $"email-general-to" ] > 0) do={
    :do {
      / tool e-mail send to=$"email-general-to" cc=$"email-general-cc" \
        subject=$subject body=$message file=$attach;
    } on-error={
      :log warning "Failed sending notification mail!";
    }
  }

  # You need to import the certificate chain for api.telegram.org!
  # https://certs.godaddy.com/repository/gdroot-g2.crt
  # https://certs.godaddy.com/repository/gdig2.crt.pem
  :if ([ :len $"telegram-tokenid" ] > 0 && [ :len $"telegram-chatid" ] > 0) do={
    :do {
      / tool fetch check-certificate=yes-without-crl keep-result=no http-method=post \
        ("https://api.telegram.org/bot" . $"telegram-tokenid" . "/sendMessage") \
        http-data=("chat_id=" . $"telegram-chatid" . "&text=" . [ $UrlEncode $message ]);
    } on-error={
      :log warning "Failed sending telegram notification!";
    }
  }
}
